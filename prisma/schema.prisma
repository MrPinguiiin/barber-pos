// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String?   @default("")
  emailVerifiedAt DateTime?
  hashed_password String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  role            Role      @default(USER)
  code            String?
  transaction     Transactions[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model Customers {
  id                String        @id @default(uuid())
  name              String
  password          String
  phone             String        @unique
  total_point       Int           @default(0)
  transaction       Transactions[]
}

model Treatments {
  id                String   @id @default(uuid())
  name              String
  price             Int
  sub_service       String?
  point             Int
  transactionDetails transactionDetails[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Points {
  id                String        @id @default(uuid())
  name              String?
  minimum           Int
  discount          Int
  transaction       Transactions[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Transactions {
  id                String    @id @default(uuid())
  customerId        String?
  customer          Customers? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  stylistId         String
  stylist           User  @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  pointId           String?
  point             Points?    @relation(fields: [pointId], references: [id], onDelete: Cascade)
  totalDiscount     Int?
  totalPrice        Int
  totalPoint        Int
  transactionDetails transactionDetails[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model transactionDetails {
  id                String             @id @default(uuid())
  treatmentId       String
  treatment         Treatments      @relation(fields: [treatmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId     String
  transaction       Transactions    @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
